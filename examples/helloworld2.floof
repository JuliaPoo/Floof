;#####################################
;   Prints `Hello World`
;   Implemented integer arithmetic 
;   and arrays/strings
;
;   Main block calls PRINT_STRING
;   which uses ZCOM to loop thtough
;   string.
;#####################################

; ---------
;   Utils
; ---------

#ZCOM       ; Z combinator
            ; Used for useful recursion
[f:[g:f(g(g))]([g:f([y:g(g)(y)])])]
~

#IDENTITY   ; Identity function
            ; Used as placeholder
[f:f]
~

; --------------------------
;   Nonnegative integers
; --------------------------

#N0     ; Represents integer `0`
[f:[x:x]]
~

#N1     ; Represents integer `1`
[f:[x:f(x)]]
~

#N2     ; Represents integer `2`
[f:[x:f(f(x))]]
~

#INC    ; INC(a) computes a+1
[n:[f:[x:f(n(f)(x))]]]
~

#ADD    ; ADD(a)(b) computes a+b
[a:[b:b(INC)(a)]]
~

#MUL    ; MUL(a)(b) computes a*b
[a:[b:b([y:ADD(y)(a)])(N0)]]
~

; -------------
;   Booleans
; -------------

#TRUE   ; Represents boolean TRUE
[x:[y:x]]
~

#FALSE   ; Represents boolean FALSE
[x:[y:y]]
~

; ---------
;   Pairs
; ---------

#PAIR   ; Represents a tuple of 2 objects
        ; Indexed by TRUE and FALSE
[x:[y:[f:f(x)(y)]]]
~

#PAIR_LEFT   ; PAIR_LEFT(PAIR) retrieves left object of PAIR
[p:p(TRUE)]
~

#PAIR_RIGHT   ; PAIR_RIGHT(PAIR) retrieves right object of PAIR
[p:p(FALSE)]
~

; ------------------
;   Arrays/Strings
; ------------------

; Arrays are implemented as a linked list
; Each element is (BOOL, (ELEMENT, NEXT))
; Where NEXT is the object representing the
; rest of the array.
; BOOL is TRUE if element is the end of array

#ARR_EMPTY      ; Represents an empty array
PAIR(TRUE)(TRUE)
~

#ARR_PUSH_FRONT ; ARR_PUSH_FRONT(a)(x) pushes object x to front of array a
[a:[x:PAIR(FALSE)(PAIR(x)(a))]]
~

#ARR_IS_EMPTY   ; ARR_IS_EMPTY(a) returns TRUE if a is empty, else FALSE
PAIR_LEFT
~

#ARR_FIRST      ; ARR_FIRST(a) returns first element of array a
[a:PAIR_LEFT(PAIR_RIGHT(a))]
~

#ARR_REST       ; ARR_REST(a) returns array without first element
[a:PAIR_RIGHT(PAIR_RIGHT(a))]
~

#PRINT_STRING   ; Prints string that's represented as an array
ZCOM([f:
    [a:
        ARR_IS_EMPTY(a)(IDENTITY)(
            ; This is to prevent infinite evaluation bcuz
            ; this branch evaluates even when ARR_IS_EMPTY is TRUE
            [x:
                [_:
                    f(ARR_REST(a))
                ](_OUT_CHAR_(ARR_FIRST(a)))
            ]
        ; Trigger evaluation
        )(IDENTITY)
    ]
])
~

; -------------
;   Constants
; -------------

#HELLO_WORLD    ; String that represents hello world
[A:[M:
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
ARR_PUSH_FRONT(
    ARR_EMPTY
)(A(N1)(M(N2)(M(N2)(M(N2)(M(N2)(M(N2)(N1)))))))
    ; !
)(M(N2)(M(N2)(A(N1)(M(N2)(M(N2)(M(N2)(A(N1)(M(N2)(N1)))))))))
    ; d
)(M(N2)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(N1))))))))))   
    ; l
)(M(N2)(A(N1)(M(N2)(M(N2)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(N1))))))))))   
    ; r
)(A(N1)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(N1))))))))))))
    ; o
)(A(N1)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(M(N2)(N1)))))))))))
    ; W
)(M(N2)(M(N2)(M(N2)(M(N2)(M(N2)(N1))))))
    ;
)(A(N1)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(N1))))))))))))
    ; o
)(M(N2)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(N1))))))))))   
    ; l
)(M(N2)(M(N2)(A(N1)(M(N2)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(N1))))))))))   
    ; l
)(A(N1)(M(N2)(M(N2)(A(N1)(M(N2)(M(N2)(M(N2)(A(N1)(M(N2)(N1))))))))))   
    ; e
)(M(N2)(M(N2)(M(N2)(A(N1)(M(N2)(M(N2)(M(N2)(N1))))))))
    ; H
]](ADD)(MUL)
~

; -------- 
;   Main
; --------

!       ; Main program
PRINT_STRING(HELLO_WORLD)
~